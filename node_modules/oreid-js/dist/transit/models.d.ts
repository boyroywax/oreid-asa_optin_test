import { DiscoveryAccount, DiscoverContinueCallback, DiscoveryOptions, KeyLookupCallback, WalletProvider, MakeWalletProviderFn, WalletAccessContext, Wallet } from '@aikon/eos-transit/lib';
import { ChainAccount, ChainNetwork, ExternalWalletType } from '../common/models';
export declare type TransitDiscoveryAccount = DiscoveryAccount;
export declare type TransitDiscoverContinueCallback = DiscoverContinueCallback;
export declare type TransitDiscoverKeyLookupCallback = KeyLookupCallback;
export declare type TransitDiscoveryOptions = DiscoveryOptions;
export declare type TransitWalletProviderFactory = MakeWalletProviderFn;
export declare type TransitWalletProvider = WalletProvider;
export declare type TransitWalletAccessContext = WalletAccessContext;
export declare type TransitWallet = Wallet;
export declare type TransitDiscoveryData = {
    keyToAccountMap: DiscoveryAccount[];
    keys?: {
        index: number;
        key: string;
        note?: string;
    }[];
};
export declare type TransitAccountInfo = any;
export declare type ConnectToTransitProviderParams = {
    chainAccount?: ChainAccount;
    chainNetwork?: ChainNetwork;
    walletType: ExternalWalletType;
};
export declare type SetupTransitWalletParams = {
    chainNetwork?: ChainNetwork;
    walletType: ExternalWalletType;
};
/** Generic SignatureProvider interface */
export interface SignatureProvider {
    /** Public keys associated with the private keys that the `SignatureProvider` holds */
    getAvailableKeys: () => Promise<string[]>;
    /** Sign a transaction */
    sign: (args: SignatureProviderArgs) => Promise<SignatureProviderSignResult>;
}
/** SignatureProvider params for sign() function */
export interface SignatureProviderArgs {
    /** Chain transaction is for */
    chainId: string;
    /** Public keys associated with the private keys needed to sign the transaction */
    requiredKeys: string[];
    /** Transaction to sign */
    serializedTransaction: Uint8Array;
    /** ABIs for all contracts with actions included in `serializedTransaction` */
    abis: BinaryAbi[];
}
/** Arguments for `push_transaction` */
export interface SignatureProviderSignResult {
    signatures: string[];
    serializedTransaction: Uint8Array;
}
/** Structure for the raw form of ABIs */
export interface BinaryAbi {
    /** account which has deployed the ABI */
    accountName: string;
    /** abi in binary form */
    abi: Uint8Array;
}
