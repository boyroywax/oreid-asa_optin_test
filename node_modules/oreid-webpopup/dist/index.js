(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('oreid-js')) :
    typeof define === 'function' && define.amd ? define(['exports', 'oreid-js'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["oreid-webpopup"] = {}, global.oreidJs));
})(this, (function (exports, oreidJs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    var getOreIdOptions = function (_a) {
        var oreId = _a.oreId;
        return {
            appId: oreId.options.appId,
            oreIdUrl: oreId.options.oreIdUrl,
            accessToken: oreId.accessToken,
            backgroundColor: oreId.options.backgroundColor,
            setBusyCallback: oreId.options.setBusyCallback,
        };
    };

    var WebWidgetCoreHandler = /** @class */ (function () {
        function WebWidgetCoreHandler(_a) {
            var _this = this;
            var oreId = _a.oreId, webWidget = _a.webWidget, container = _a.container;
            this.willCloseListener = function (event) {
                var _a;
                var oreIdUrl = getOreIdOptions({ oreId: _this.oreId }).oreIdUrl;
                // emitted by oreid-service
                if (event.origin === oreIdUrl && event.data && event.data === ((_a = _this.webWidget) === null || _a === void 0 ? void 0 : _a.closeMessage)) {
                    _this.willClose = true;
                }
            };
            this.oreId = oreId;
            this.webWidget = webWidget;
            this.container = container;
            this.isBusy = false;
            this.willClose = false;
        }
        WebWidgetCoreHandler.prototype.open = function () {
            this.container.window.addEventListener('message', this.willCloseListener);
            this.container.show();
        };
        // invoked by webwidget whenever it is closed
        WebWidgetCoreHandler.prototype.close = function (onError) {
            this.isBusy = false;
            this.container.hide();
            this.container.window.removeEventListener('message', this.willCloseListener);
            if (!this.willClose)
                onError(new Error('Closed by User'));
            this.willClose = false;
        };
        WebWidgetCoreHandler.prototype.getWebWidgetCoreProps = function (renderProps) {
            return __awaiter(this, void 0, void 0, function () {
                var webWidgetCoreProps;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.oreId.appendTimestampAndSignatureToWidgetProps({
                                action: { name: renderProps.actionName, params: renderProps.params },
                                onError: renderProps.onError,
                                onSuccess: renderProps.onSuccess,
                                oreIdOptions: getOreIdOptions({ oreId: this.oreId }),
                                origin: this.container.window.location.origin,
                            })];
                        case 1:
                            webWidgetCoreProps = _a.sent();
                            return [2 /*return*/, webWidgetCoreProps];
                    }
                });
            });
        };
        WebWidgetCoreHandler.prototype.render = function (renderProps) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.isBusy) {
                        throw new Error('WebWidget is busy. Wait for it to finish');
                    }
                    this.isBusy = true;
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var onError = function (error) {
                                _this.isBusy = false;
                                reject(error);
                            };
                            var propsWhitActions = __assign(__assign({}, renderProps), { onSuccess: function (_a) {
                                    var data = _a.data;
                                    return resolve(data);
                                }, onError: onError });
                            _this.getWebWidgetCoreProps(__assign({}, propsWhitActions))
                                .then(function (webWidgetCoreProps) {
                                _this.open();
                                _this.webWidget.renderWebWidget(__assign(__assign({}, webWidgetCoreProps), { onClose: function () { return _this.close(propsWhitActions.onError); } }), _this.container.getIframeSelector());
                            })
                                .catch(onError);
                        })];
                });
            });
        };
        return WebWidgetCoreHandler;
    }());

    function assign(obj, props) {
        for (const key in props) {
            Object.defineProperty(obj, key, {
                value: props[key],
                enumerable: true,
                configurable: true,
            });
        }

        return obj;
    }

    function createError(err, code, props) {
        if (!err || typeof err === 'string') {
            throw new TypeError('Please pass an Error to err-code');
        }

        if (!props) {
            props = {};
        }

        if (typeof code === 'object') {
            props = code;
            code = undefined;
        }

        if (code != null) {
            props.code = code;
        }

        try {
            return assign(err, props);
        } catch (_) {
            props.message = err.message;
            props.stack = err.stack;

            const ErrClass = function () {};

            ErrClass.prototype = Object.create(Object.getPrototypeOf(err));

            return assign(new ErrClass(), props);
        }
    }

    var errCode = createError;

    var retry$2 = {};

    function RetryOperation(timeouts, options) {
      // Compatibility for the old (timeouts, retryForever) signature
      if (typeof options === 'boolean') {
        options = { forever: options };
      }

      this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
      this._timeouts = timeouts;
      this._options = options || {};
      this._maxRetryTime = options && options.maxRetryTime || Infinity;
      this._fn = null;
      this._errors = [];
      this._attempts = 1;
      this._operationTimeout = null;
      this._operationTimeoutCb = null;
      this._timeout = null;
      this._operationStart = null;

      if (this._options.forever) {
        this._cachedTimeouts = this._timeouts.slice(0);
      }
    }
    var retry_operation = RetryOperation;

    RetryOperation.prototype.reset = function() {
      this._attempts = 1;
      this._timeouts = this._originalTimeouts;
    };

    RetryOperation.prototype.stop = function() {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }

      this._timeouts       = [];
      this._cachedTimeouts = null;
    };

    RetryOperation.prototype.retry = function(err) {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }

      if (!err) {
        return false;
      }
      var currentTime = new Date().getTime();
      if (err && currentTime - this._operationStart >= this._maxRetryTime) {
        this._errors.unshift(new Error('RetryOperation timeout occurred'));
        return false;
      }

      this._errors.push(err);

      var timeout = this._timeouts.shift();
      if (timeout === undefined) {
        if (this._cachedTimeouts) {
          // retry forever, only keep last error
          this._errors.splice(this._errors.length - 1, this._errors.length);
          this._timeouts = this._cachedTimeouts.slice(0);
          timeout = this._timeouts.shift();
        } else {
          return false;
        }
      }

      var self = this;
      var timer = setTimeout(function() {
        self._attempts++;

        if (self._operationTimeoutCb) {
          self._timeout = setTimeout(function() {
            self._operationTimeoutCb(self._attempts);
          }, self._operationTimeout);

          if (self._options.unref) {
              self._timeout.unref();
          }
        }

        self._fn(self._attempts);
      }, timeout);

      if (this._options.unref) {
          timer.unref();
      }

      return true;
    };

    RetryOperation.prototype.attempt = function(fn, timeoutOps) {
      this._fn = fn;

      if (timeoutOps) {
        if (timeoutOps.timeout) {
          this._operationTimeout = timeoutOps.timeout;
        }
        if (timeoutOps.cb) {
          this._operationTimeoutCb = timeoutOps.cb;
        }
      }

      var self = this;
      if (this._operationTimeoutCb) {
        this._timeout = setTimeout(function() {
          self._operationTimeoutCb();
        }, self._operationTimeout);
      }

      this._operationStart = new Date().getTime();

      this._fn(this._attempts);
    };

    RetryOperation.prototype.try = function(fn) {
      console.log('Using RetryOperation.try() is deprecated');
      this.attempt(fn);
    };

    RetryOperation.prototype.start = function(fn) {
      console.log('Using RetryOperation.start() is deprecated');
      this.attempt(fn);
    };

    RetryOperation.prototype.start = RetryOperation.prototype.try;

    RetryOperation.prototype.errors = function() {
      return this._errors;
    };

    RetryOperation.prototype.attempts = function() {
      return this._attempts;
    };

    RetryOperation.prototype.mainError = function() {
      if (this._errors.length === 0) {
        return null;
      }

      var counts = {};
      var mainError = null;
      var mainErrorCount = 0;

      for (var i = 0; i < this._errors.length; i++) {
        var error = this._errors[i];
        var message = error.message;
        var count = (counts[message] || 0) + 1;

        counts[message] = count;

        if (count >= mainErrorCount) {
          mainError = error;
          mainErrorCount = count;
        }
      }

      return mainError;
    };

    (function (exports) {
    var RetryOperation = retry_operation;

    exports.operation = function(options) {
      var timeouts = exports.timeouts(options);
      return new RetryOperation(timeouts, {
          forever: options && options.forever,
          unref: options && options.unref,
          maxRetryTime: options && options.maxRetryTime
      });
    };

    exports.timeouts = function(options) {
      if (options instanceof Array) {
        return [].concat(options);
      }

      var opts = {
        retries: 10,
        factor: 2,
        minTimeout: 1 * 1000,
        maxTimeout: Infinity,
        randomize: false
      };
      for (var key in options) {
        opts[key] = options[key];
      }

      if (opts.minTimeout > opts.maxTimeout) {
        throw new Error('minTimeout is greater than maxTimeout');
      }

      var timeouts = [];
      for (var i = 0; i < opts.retries; i++) {
        timeouts.push(this.createTimeout(i, opts));
      }

      if (options && options.forever && !timeouts.length) {
        timeouts.push(this.createTimeout(i, opts));
      }

      // sort the array numerically ascending
      timeouts.sort(function(a,b) {
        return a - b;
      });

      return timeouts;
    };

    exports.createTimeout = function(attempt, opts) {
      var random = (opts.randomize)
        ? (Math.random() + 1)
        : 1;

      var timeout = Math.round(random * opts.minTimeout * Math.pow(opts.factor, attempt));
      timeout = Math.min(timeout, opts.maxTimeout);

      return timeout;
    };

    exports.wrap = function(obj, options, methods) {
      if (options instanceof Array) {
        methods = options;
        options = null;
      }

      if (!methods) {
        methods = [];
        for (var key in obj) {
          if (typeof obj[key] === 'function') {
            methods.push(key);
          }
        }
      }

      for (var i = 0; i < methods.length; i++) {
        var method   = methods[i];
        var original = obj[method];

        obj[method] = function retryWrapper(original) {
          var op       = exports.operation(options);
          var args     = Array.prototype.slice.call(arguments, 1);
          var callback = args.pop();

          args.push(function(err) {
            if (op.retry(err)) {
              return;
            }
            if (err) {
              arguments[0] = op.mainError();
            }
            callback.apply(this, arguments);
          });

          op.attempt(function() {
            original.apply(obj, args);
          });
        }.bind(obj, original);
        obj[method].options = options;
      }
    };
    }(retry$2));

    var retry$1 = retry$2;

    var errcode = errCode;
    var retry = retry$1;

    var hasOwn = Object.prototype.hasOwnProperty;

    function isRetryError(err) {
        return err && err.code === 'EPROMISERETRY' && hasOwn.call(err, 'retried');
    }

    function promiseRetry(fn, options) {
        var temp;
        var operation;

        if (typeof fn === 'object' && typeof options === 'function') {
            // Swap options and fn when using alternate signature (options, fn)
            temp = options;
            options = fn;
            fn = temp;
        }

        operation = retry.operation(options);

        return new Promise(function (resolve, reject) {
            operation.attempt(function (number) {
                Promise.resolve()
                .then(function () {
                    return fn(function (err) {
                        if (isRetryError(err)) {
                            err = err.retried;
                        }

                        throw errcode(new Error('Retrying'), 'EPROMISERETRY', { retried: err });
                    }, number);
                })
                .then(resolve, function (err) {
                    if (isRetryError(err)) {
                        err = err.retried;

                        if (operation.retry(err || new Error())) {
                            return;
                        }
                    }

                    reject(err);
                });
            });
        });
    }

    var promiseRetry_1 = promiseRetry;

    /* eslint-disable no-param-reassign */
    var addContainerStyle = function (container) {
        container.style.position = 'fixed';
        // container.style.display = "flex";
        container.style.display = 'none';
        container.style.backgroundColor = 'rgba(0,0,0,0.3)';
        container.style.height = '100vh';
        container.style.width = '100vw';
        container.style.top = '0';
        container.style.left = '0px';
        container.style.justifyContent = 'center';
        container.style.zIndex = '999999999';
    };

    /* eslint-disable no-param-reassign */
    var addIframeContainerStyle = function (container) {
        container.style.backgroundColor = '#fafafa';
        container.style.borderRadius = '8px';
        container.style.maxHeight = '740px';
        container.style.maxWidth = '420px';
        container.style.boxShadow = '0px 10px 13px -7px #000000, 5px 5px 15px 5px rgba(0,0,0,0)';
        container.style.position = 'relative';
        container.style.alignSelf = 'center';
        container.style.overflow = 'hidden';
    };

    var createHtmlContainer = function (_a) {
        var _b;
        var webWindow = _a.webWindow, containerId = _a.containerId, iframeId = _a.iframeId, webWidget = _a.webWidget;
        if (webWindow.document.getElementById(containerId)) {
            throw new Error("This element \"" + containerId + "\" is already present in the document");
        }
        if (webWindow.document.getElementById(iframeId)) {
            throw new Error("This element \"" + iframeId + "\" is already present in the document");
        }
        var container = webWindow.document.createElement('div');
        var iframeContainer = webWindow.document.createElement('div');
        addContainerStyle(container);
        addIframeContainerStyle(iframeContainer);
        container.id = containerId;
        iframeContainer.id = iframeId;
        var onClick = function (event) {
            if (webWidget.webWidgetCoreProps.windowType === webWidget.WindowType.POPUP) {
                event.preventDefault();
                event.stopPropagation();
                webWidget.focusWebWidget(webWindow);
            }
        };
        iframeContainer.onclick = onClick;
        container.onclick = onClick;
        container.appendChild(iframeContainer);
        (_b = webWindow.document.querySelector('body')) === null || _b === void 0 ? void 0 : _b.appendChild(container);
    };

    var getElementById = function (_a) {
        var webWindow = _a.webWindow, elementId = _a.elementId;
        var element = webWindow.document.getElementById(elementId);
        if (!element) {
            throw new Error("This elementId \"" + elementId + "\" is not present in the document");
        }
        return element;
    };

    var Container = /** @class */ (function () {
        function Container(_a) {
            var containerId = _a.containerId, iframeId = _a.iframeId, webWindow = _a.webWindow, webWidget = _a.webWidget;
            this.containerId = containerId;
            this.iframeId = iframeId;
            this.webWindow = webWindow;
            createHtmlContainer({
                containerId: this.containerId,
                iframeId: this.iframeId,
                webWindow: this.webWindow,
                webWidget: webWidget,
            });
        }
        Object.defineProperty(Container.prototype, "window", {
            get: function () {
                return this.webWindow;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Container.prototype, "containerElement", {
            get: function () {
                return this.webWindow.document.querySelector("#" + this.containerId);
            },
            enumerable: false,
            configurable: true
        });
        Container.prototype.getIframeSelector = function () {
            return "#" + this.iframeId;
        };
        Container.prototype.show = function () {
            var element = getElementById({ webWindow: this.webWindow, elementId: this.containerId });
            element.style.display = 'flex';
        };
        Container.prototype.hide = function () {
            var element = getElementById({ webWindow: this.webWindow, elementId: this.containerId });
            element.style.display = 'none';
        };
        return Container;
    }());

    var DEFAULT_OREID_URL = 'https://service.oreid.io';
    var SUPPORTED_VERSION = '1';
    var WIDGET_DOWNLOAD_PATH = "dist/v" + SUPPORTED_VERSION + "/oreid-web-widget-core.js";

    var getWebWidgetCoreFromWindow = function (_a) {
        var webWindow = _a.webWindow;
        //@ts-ignore
        var webWidgetCore = webWindow.oreidWebWidgetCore;
        if (!webWidgetCore) {
            throw new Error('webWidget not found on window');
        }
        if (SUPPORTED_VERSION !== webWidgetCore.version) {
            throw new Error("webWidget " + SUPPORTED_VERSION + " is no longer supported. Please upgrade to: " + webWidgetCore.version);
        }
        return webWidgetCore;
    };

    var returnWebWidgetCoreFromWindow = function (resolve, reject, webWindow) {
        try {
            var webWidgetCore = getWebWidgetCoreFromWindow({ webWindow: webWindow });
            resolve(webWidgetCore);
        }
        catch (err) {
            reject(err);
        }
    };
    var loadWebWidgetCore = function (_a) {
        var _b;
        var oreId = _a.oreId, webWindow = _a.webWindow;
        var ordIdServiceUrl = oreId.options.oreIdUrl || DEFAULT_OREID_URL;
        var scriptUrl = ordIdServiceUrl + "/" + WIDGET_DOWNLOAD_PATH;
        var scriptId = 'oreid-js-script';
        // return core if already loaded
        if (webWindow.document.querySelector('#oreid-js-script')) {
            return new Promise(function (resolve, reject) {
                return returnWebWidgetCoreFromWindow(resolve, reject, webWindow);
            });
        }
        // download webwidget script then create and return core
        var script = webWindow.document.createElement('script');
        script.async = true;
        script.src = scriptUrl;
        script.id = scriptId;
        (_b = webWindow.document.querySelector('body')) === null || _b === void 0 ? void 0 : _b.appendChild(script);
        return new Promise(function (resolve, reject) {
            script.addEventListener('error', function () {
                reject(new Error('Problem downloading ORE ID WebWidget - Server might be temporarily unavailable'));
            });
            script.addEventListener('load', function () {
                return returnWebWidgetCoreFromWindow(resolve, reject, webWindow);
            }, { once: true });
        });
    };

    var createWebWidgetCoreHandler = function (_a) {
        var webWindow = _a.webWindow, oreId = _a.oreId, containerId = _a.containerId, iframeId = _a.iframeId;
        return __awaiter(void 0, void 0, void 0, function () {
            var widgetCoreWindow, container;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, promiseRetry_1(function (retry) {
                            return loadWebWidgetCore({ webWindow: webWindow, oreId: oreId }).catch(retry);
                        }, { retries: 3 })];
                    case 1:
                        widgetCoreWindow = _b.sent();
                        container = new Container({ containerId: containerId, iframeId: iframeId, webWindow: webWindow, webWidget: widgetCoreWindow });
                        return [2 /*return*/, new WebWidgetCoreHandler({
                                oreId: oreId,
                                container: container,
                                webWidget: widgetCoreWindow,
                            })];
                }
            });
        });
    };

    /** Attempt to autosign the transaction by calling the api (with no user popup)
     * Return:
     *  Sign result - auto signed sucessfully
     *  undefined - could not autosign
     */
    var autoSign = function (_a) {
        var transaction = _a.transaction;
        return __awaiter(void 0, void 0, void 0, function () {
            var canAuto;
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if ((_c = (_b = transaction.data) === null || _b === void 0 ? void 0 : _b.signOptions) === null || _c === void 0 ? void 0 : _c.preventAutosign) {
                            return [2 /*return*/, undefined];
                        }
                        return [4 /*yield*/, transaction.checkCanAutoSign()];
                    case 1:
                        canAuto = _d.sent();
                        if (!canAuto)
                            return [2 /*return*/, undefined];
                        return [2 /*return*/, transaction.autoSign()];
                }
            });
        });
    };

    var OreIdWebPopup = /** @class */ (function () {
        /**
         * * WARNING: This class should only be created using createOreIdWebWidget() never via new OreIdWebWidget()
         */
        function OreIdWebPopup(_a) {
            var _this = this;
            var oreId = _a.oreId, webWidgetCore = _a.webWidgetCore;
            var _b;
            /** Present Authentication login flow user experience */
            this.auth = function (params) { return __awaiter(_this, void 0, void 0, function () {
                var oreId, result, user;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            oreId = this.oreId;
                            return [4 /*yield*/, this.webWidgetCore.render({
                                    actionName: oreidJs.WebWidgetAction.Auth,
                                    params: params,
                                })];
                        case 1:
                            result = _a.sent();
                            if (!result.accessToken) {
                                throw new Error('Access Token was not returned');
                            }
                            oreId.auth.setAuthResult(result);
                            return [4 /*yield*/, this.oreId.auth.user.getData()];
                        case 2:
                            user = _a.sent();
                            return [2 /*return*/, __assign(__assign({}, result), { user: user })];
                    }
                });
            }); };
            /** Present Sign transaction user experience */
            this.sign = function (params) { return __awaiter(_this, void 0, void 0, function () {
                var wasAutoSigned, _a, transactionData, widgetParams, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, autoSign(params)];
                        case 1:
                            wasAutoSigned = _b.sent();
                            if (wasAutoSigned) {
                                return [2 /*return*/, wasAutoSigned];
                            }
                            _a = params.transaction.data, _a.signedTransaction, transactionData = __rest(_a, ["signedTransaction"]);
                            widgetParams = __assign({}, transactionData);
                            return [4 /*yield*/, this.webWidgetCore.render({
                                    actionName: oreidJs.WebWidgetAction.Sign,
                                    params: widgetParams,
                                })];
                        case 2:
                            result = _b.sent();
                            return [2 /*return*/, result];
                    }
                });
            }); };
            /** Present New Chain Account user experience */
            this.newChainAccount = function (params) { return __awaiter(_this, void 0, void 0, function () {
                var paramsDefault, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.oreId.auth.accountName) {
                                throw new Error('user not logged in');
                            }
                            paramsDefault = __assign(__assign({}, params), { chainNetwork: params.chainNetwork || '', accountType: params.accountType || 'native', account: this.oreId.auth.accountName });
                            return [4 /*yield*/, this.webWidgetCore.render({
                                    actionName: oreidJs.WebWidgetAction.NewChainAccount,
                                    params: paramsDefault,
                                })];
                        case 1:
                            result = _a.sent();
                            if (!(result === null || result === void 0 ? void 0 : result.chainAccount)) {
                                throw new Error('chainAccount was not returned.');
                            }
                            return [4 /*yield*/, this.oreId.auth.user.getData()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, { chainAccount: result.chainAccount, chainNetwork: params.chainNetwork || '' }];
                    }
                });
            }); };
            /** Present Recover Account (e.g. Reset Password) user experience */
            this.recoverAccount = function (params) { return __awaiter(_this, void 0, void 0, function () {
                var paramsWithAccount, result;
                return __generator(this, function (_a) {
                    paramsWithAccount = __assign(__assign({}, params), { account: this.oreId.auth.accountName });
                    result = this.webWidgetCore.render({
                        actionName: oreidJs.WebWidgetAction.RecoverAccount,
                        params: paramsWithAccount,
                    });
                    return [2 /*return*/, result];
                });
            }); };
            if (((_b = oreId === null || oreId === void 0 ? void 0 : oreId.constructor) === null || _b === void 0 ? void 0 : _b.name) !== oreidJs.OreId.name) {
                throw new Error('oreId should be an instance of OreId');
            }
            if (!(webWidgetCore instanceof WebWidgetCoreHandler)) {
                throw new Error('webWidgetCore should be an instance of WebWidgetCoreHandler');
            }
            this.oreId = oreId;
            this.webWidgetCore = webWidgetCore;
        }
        return OreIdWebPopup;
    }());

    // ! This object "options" is here to allow configuration options in the future
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    var initializeOreIdWebPopup = function (options) {
        if (!window) {
            throw new Error('The window is required');
        }
        return function (oreId) { return __awaiter(void 0, void 0, void 0, function () {
            var webWindow, random, containerId, iframeId, webWidgetCore;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (((_a = oreId === null || oreId === void 0 ? void 0 : oreId.constructor) === null || _a === void 0 ? void 0 : _a.name) !== oreidJs.OreId.name) {
                            throw new Error('oreId should be an instance of OreId');
                        }
                        webWindow = window;
                        random = Math.round(Math.random() * 100000);
                        containerId = "webwidget-oreid-container-" + random;
                        iframeId = "webwidget-oreid-iframe-" + random;
                        return [4 /*yield*/, createWebWidgetCoreHandler({ oreId: oreId, webWindow: webWindow, containerId: containerId, iframeId: iframeId })];
                    case 1:
                        webWidgetCore = _b.sent();
                        return [2 /*return*/, new OreIdWebPopup({ oreId: oreId, webWidgetCore: webWidgetCore })];
                }
            });
        }); };
    };

    // ! This object "options" is here to allow configuration options in the future
    /** ORE ID Popup User Experience for Web (including Vanilla HTML/JS, React, Vue, etc.) */
    var WebPopup = function (options) {
        return {
            init: initializeOreIdWebPopup(),
            type: oreidJs.PluginType.Popup,
            description: 'OREID Web Popup',
        };
    };

    exports.WebPopup = WebPopup;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.js.map
